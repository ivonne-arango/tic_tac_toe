---TIC TAC TOE kata, Es un juego que se llevará a cabo entre dos bots (X,O)
tirarán de forma alternada y se irán llenando las posiciónes del juego obteniendo 
un número aleatorio de entre el número y letra de casillas (tipo matriz: A1,B1,C1
A2,B2,C2,A3,B3,C3), cada que un elemnto de la matriz sea ocupado por uno de los bots
se eliminará de la matriz para que no pueda volver a usarse.
A1 | B1 | C1
A2 | B2 | C2
A3 | B3 | C3

Jugador 1 gana si:
A1=X & B1=X &C1=X ||
A2=X & B2=X &C2=X ||
A3=X & B3=X &C3=X ||
A1=X & A2=X &A3=X ||
B1=X & B2=X &B3=X ||
C1=X & C2=X &C3=X ||
A1=X & B2=X &C3=X ||
A3=X & B2=X &C1=X


Jugador 2 gana si:
A1=O & B1=O &C1=O ||
A2=O & B2=O &C2=O ||
A3=O & B3=O &C3=O ||
A1=O & A2=O &A3=O ||
B1=O & B2=O &B3=O ||
C1=O & C2=O &C3=O ||
A1=O & B2=O &C3=O ||
A3=O & B2=O &C1=O

(A1,A2,A3,B1,B2,B3,C1,C2,C3)

El juego termina si se cumplen alguno de los casos anteriores o si ya no hay casillas para llenar (se declara empate.)

 O | X |O
 X | X |O
 X | O |X


#Tests for tic_tac_toe Player1 wins
def test_gana_X_horizontal():
        assert  Tic_tac_toe("X,X,X,O,O, ,X,0,X") == ['GANA X']     
def test_gana_X_vertical():
        assert  Tic_tac_toe("O,X,O,O,X,X,O,X,O") == ['GANA X'] 
def test_gana_X_diagonal():
        assert  Tic_tac_toe("X,O,X,X,X, ,O,O,X") == ['GANA X'] 
#Tests for tic_tac_toe Player2 wins
def test_gana_O_horizontal():
        assert  Tic_tac_toe("O, ,X,O,O,O, ,X,X") == ['GANA O']
def test_gana_O_vertical():
        assert  Tic_tac_toe("X, ,O,X, ,O,X,X,O") == ['GANA O']
def test_gana_O_diagonal():        
        assert  Tic_tac_toe(" ,X,O,O,O, ,X,X,O") == ['GANA O']  
#Tests for tic_tac_toe draw
def test_empate():
        assert  Tic_tac_toe("O,X,O,X,X,O,X,O,X") == ['EMPATE']    

---Se lanzan las pruebas y se empieza la codificación a partir de ellas.     
---Se hacen primeras pruebas con caso algunos casos existosos en ganador X para ir validando la primer casuistica ganadora.    
---------- coverage: platform darwin, python 3.8.5-final-0 -----------
Name              Stmts   Miss  Cover
-------------------------------------
first_code_1.py      31      4    87%

-En esta prueba se cumplen dos condiciones de ganador por lo que está enviando un error en el resultado, se corregirá código
-En esta prueba se corrige la prueba para que arroje el ganador correcto.
-En esta prueba se agrega funcionalidad para O's 
-Se continúa codificando a partir de las pruebas.
-Se modifica la prueba anterior ya que no obtuvimos resultado esperado.
-Se agrega codigo para caso de prueba esperado O vertical en tercera columna.
-Se incluye prueba de diagonal O 
---------- coverage: platform darwin, python 3.8.5-final-0 -----------
Name              Stmts   Miss  Cover
-------------------------------------
first_code_1.py      53      7    87%

-Se incluye prueba para empate
---------- coverage: platform darwin, python 3.8.5-final-0 -----------
Name              Stmts   Miss  Cover
-------------------------------------
first_code_1.py      55      8    85%

Refactorización de código:
Para que el código sea más entendible cambié el nombre de algunas variables y agrupe los casos ganadores en X y O.



